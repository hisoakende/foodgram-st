version: '3.8'

services:
  db:
    image: postgres:14.0-alpine
    container_name: foodgram-db
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    container_name: foodgram-backend
    build:
      context: ../backend/foodgram
      dockerfile: Dockerfile
    volumes:
      - django_static:/app/static
      - media_volume:/app/media 
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=${DEBUG}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - DB_ENGINE=${DB_ENGINE}
      - DB_NAME=${DB_NAME}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - DB_HOST=db
      - DB_PORT=${DB_PORT}
      - STATIC_URL=/django_static/
      - STATIC_ROOT=/app/static
      - MEDIA_URL=/media/
      - MEDIA_ROOT=/app/media
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/api/ || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10

  frontend:
    container_name: foodgram-front
    build: ../frontend
    volumes:
      - frontend_static:/app/result_build  

  nginx:
    container_name: foodgram-proxy
    image: nginx:1.25.4-alpine
    ports:
      - "80:80"
    volumes:
      - frontend_static:/var/www/html/frontend_static
      - django_static:/var/www/html/django_static
      - media_volume:/var/www/html/media
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - backend
      - frontend
    restart: unless-stopped

volumes:
  postgres_data:
  frontend_static:
  django_static:
  media_volume:
